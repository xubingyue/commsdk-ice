// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7a4
//
// <auto-generated>
//
// Generated from file `clientserver.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <clientserver.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION  != 30754
#       error Ice version mismatch: an exact match is required for beta generated code
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::UVSS::RequestCanceledException> iceC_UVSS_RequestCanceledException_init("::UVSS::RequestCanceledException");

const ::std::string iceC_UVSS_Client_ids[2] =
{
    "::Ice::Object",
    "::UVSS::Client"
};
const ::std::string iceC_UVSS_Client_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "writeCheckInfo"
};
const ::std::string iceC_UVSS_Client_writeCheckInfo_name = "writeCheckInfo";

const ::std::string iceC_UVSS_Server_ids[2] =
{
    "::Ice::Object",
    "::UVSS::Server"
};
const ::std::string iceC_UVSS_Server_ops[] =
{
    "addClient",
    "checkVersion",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_UVSS_Server_checkVersion_name = "checkVersion";
const ::std::string iceC_UVSS_Server_addClient_name = "addClient";

}

UVSS::RequestCanceledException::~RequestCanceledException()
{
}

const ::std::string&
UVSS::RequestCanceledException::ice_staticId()
{
    static const ::std::string typeId = "::UVSS::RequestCanceledException";
    return typeId;
}

bool
UVSS::Client::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_UVSS_Client_ids, iceC_UVSS_Client_ids + 2, s);
}

::std::vector<::std::string>
UVSS::Client::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_UVSS_Client_ids[0], &iceC_UVSS_Client_ids[2]);
}

::std::string
UVSS::Client::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
UVSS::Client::ice_staticId()
{
    static const ::std::string typeId = "::UVSS::Client";
    return typeId;
}

bool
UVSS::Client::_iceD_writeCheckInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_uVSSImageName;
    ::UVSS::ByteSeq iceP_uVSSImage;
    ::std::string iceP_plateImageName;
    ::UVSS::ByteSeq iceP_plateImage;
    ::std::string iceP_channel;
    ::std::string iceP_plateNumber;
    ::std::string iceP_direction;
    ::std::string iceP_time;
    ::std::string iceP_extension;
    istr->readAll(iceP_uVSSImageName, iceP_uVSSImage, iceP_plateImageName, iceP_plateImage, iceP_channel, iceP_plateNumber, iceP_direction, iceP_time, iceP_extension);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->writeCheckInfoAsync(::std::move(iceP_uVSSImageName), ::std::move(iceP_uVSSImage), ::std::move(iceP_plateImageName), ::std::move(iceP_plateImage), ::std::move(iceP_channel), ::std::move(iceP_plateNumber), ::std::move(iceP_direction), ::std::move(iceP_time), ::std::move(iceP_extension), inA->response(), inA->exception(), current);
    return true;
}

bool
UVSS::Client::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_UVSS_Client_ops, iceC_UVSS_Client_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_UVSS_Client_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_writeCheckInfo(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
UVSS::Server::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_UVSS_Server_ids, iceC_UVSS_Server_ids + 2, s);
}

::std::vector<::std::string>
UVSS::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_UVSS_Server_ids[0], &iceC_UVSS_Server_ids[2]);
}

::std::string
UVSS::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
UVSS::Server::ice_staticId()
{
    static const ::std::string typeId = "::UVSS::Server";
    return typeId;
}

bool
UVSS::Server::_iceD_checkVersion(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_ver;
    istr->readAll(iceP_ver);
    inS.endReadParams();
    bool ret = this->checkVersion(::std::move(iceP_ver), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return false;
}

bool
UVSS::Server::_iceD_addClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Identity iceP_id;
    istr->readAll(iceP_id);
    inS.endReadParams();
    this->addClient(::std::move(iceP_id), current);
    inS.writeEmptyParams();
    return false;
}

bool
UVSS::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_UVSS_Server_ops, iceC_UVSS_Server_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_UVSS_Server_ops)
    {
        case 0:
        {
            return _iceD_addClient(in, current);
        }
        case 1:
        {
            return _iceD_checkVersion(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
UVSS::ClientPrx::_iceI_writeCheckInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_uVSSImageName, const ::UVSS::ByteSeq& iceP_uVSSImage, const ::std::string& iceP_plateImageName, const ::UVSS::ByteSeq& iceP_plateImage, const ::std::string& iceP_channel, const ::std::string& iceP_plateNumber, const ::std::string& iceP_direction, const ::std::string& iceP_time, const ::std::string& iceP_extension, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_UVSS_Client_writeCheckInfo_name);
    outAsync->invoke(iceC_UVSS_Client_writeCheckInfo_name, ::Ice::OperationMode::Idempotent, ::Ice::DefaultFormat, context, 
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_uVSSImageName, iceP_uVSSImage, iceP_plateImageName, iceP_plateImage, iceP_channel, iceP_plateNumber, iceP_direction, iceP_time, iceP_extension);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::UVSS::RequestCanceledException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

::std::shared_ptr<::Ice::ObjectPrx>
UVSS::ClientPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ClientPrx>();
}

const ::std::string&
UVSS::ClientPrx::ice_staticId()
{
    return UVSS::Client::ice_staticId();
}

void
UVSS::ServerPrx::_iceI_checkVersion(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_ver, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_UVSS_Server_checkVersion_name);
    outAsync->invoke(iceC_UVSS_Server_checkVersion_name, ::Ice::OperationMode::Normal, ::Ice::DefaultFormat, context, 
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ver);
        },
        nullptr);
}

void
UVSS::ServerPrx::_iceI_addClient(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Identity& iceP_id, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_UVSS_Server_addClient_name, ::Ice::OperationMode::Normal, ::Ice::DefaultFormat, context, 
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
UVSS::ServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<ServerPrx>();
}

const ::std::string&
UVSS::ServerPrx::ice_staticId()
{
    return UVSS::Server::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_UVSS_Client_writeCheckInfo_name = "writeCheckInfo";

const ::std::string iceC_UVSS_Server_checkVersion_name = "checkVersion";

const ::std::string iceC_UVSS_Server_addClient_name = "addClient";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::UVSS::RequestCanceledException> iceC_UVSS_RequestCanceledException_init("::UVSS::RequestCanceledException");

}

UVSS::RequestCanceledException::~RequestCanceledException() throw()
{
}

::std::string
UVSS::RequestCanceledException::ice_id() const
{
    return "::UVSS::RequestCanceledException";
}

UVSS::RequestCanceledException*
UVSS::RequestCanceledException::ice_clone() const
{
    return new RequestCanceledException(*this);
}

void
UVSS::RequestCanceledException::ice_throw() const
{
    throw *this;
}

void
UVSS::RequestCanceledException::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::UVSS::RequestCanceledException", -1, true);
    Ice::StreamWriter< ::UVSS::RequestCanceledException, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
UVSS::RequestCanceledException::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::UVSS::RequestCanceledException, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

UVSS::AMD_Client_writeCheckInfo::~AMD_Client_writeCheckInfo()
{
}

IceAsync::UVSS::AMD_Client_writeCheckInfo::AMD_Client_writeCheckInfo(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::UVSS::AMD_Client_writeCheckInfo::ice_response()
{
    writeEmptyParams();
    completed();
}
::IceProxy::Ice::Object* ::IceProxy::UVSS::upCast(::IceProxy::UVSS::Client* p) { return p; }

void
::IceProxy::UVSS::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::UVSS::Client>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::UVSS::Client;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::UVSS::Client::_iceI_begin_writeCheckInfo(const ::std::string& iceP_uVSSImageName, const ::UVSS::ByteSeq& iceP_uVSSImage, const ::std::string& iceP_plateImageName, const ::UVSS::ByteSeq& iceP_plateImage, const ::std::string& iceP_channel, const ::std::string& iceP_plateNumber, const ::std::string& iceP_direction, const ::std::string& iceP_time, const ::std::string& iceP_extension, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_UVSS_Client_writeCheckInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_UVSS_Client_writeCheckInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_UVSS_Client_writeCheckInfo_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_uVSSImageName);
        ostr->write(iceP_uVSSImage);
        ostr->write(iceP_plateImageName);
        ostr->write(iceP_plateImage);
        ostr->write(iceP_channel);
        ostr->write(iceP_plateNumber);
        ostr->write(iceP_direction);
        ostr->write(iceP_time);
        ostr->write(iceP_extension);
        result->endWriteParams();
        result->invoke(iceC_UVSS_Client_writeCheckInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::UVSS::Client::end_writeCheckInfo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::check(result, this, iceC_UVSS_Client_writeCheckInfo_name);
    if(!result->waitForResponse())
    {
        try
        {
            result->throwUserException();
        }
        catch(const ::UVSS::RequestCanceledException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->readEmptyParams();
}

::IceProxy::Ice::Object*
IceProxy::UVSS::Client::_newInstance() const
{
    return new Client;
}

const ::std::string&
IceProxy::UVSS::Client::ice_staticId()
{
    return ::UVSS::Client::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::UVSS::upCast(::IceProxy::UVSS::Server* p) { return p; }

void
::IceProxy::UVSS::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::UVSS::Server>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::UVSS::Server;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::UVSS::Server::_iceI_begin_checkVersion(const ::std::string& iceP_ver, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_UVSS_Server_checkVersion_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_UVSS_Server_checkVersion_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_UVSS_Server_checkVersion_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ver);
        result->endWriteParams();
        result->invoke(iceC_UVSS_Server_checkVersion_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::UVSS::Server::end_checkVersion(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::check(result, this, iceC_UVSS_Server_checkVersion_name);
    bool ret;
    if(!result->waitForResponse())
    {
        try
        {
            result->throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->startReadParams();
    istr->read(ret);
    result->endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::UVSS::Server::_iceI_begin_addClient(const ::Ice::Identity& iceP_id, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_UVSS_Server_addClient_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_UVSS_Server_addClient_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        result->endWriteParams();
        result->invoke(iceC_UVSS_Server_addClient_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::UVSS::Server::end_addClient(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_UVSS_Server_addClient_name);
}

::IceProxy::Ice::Object*
IceProxy::UVSS::Server::_newInstance() const
{
    return new Server;
}

const ::std::string&
IceProxy::UVSS::Server::ice_staticId()
{
    return ::UVSS::Server::ice_staticId();
}

UVSS::Client::~Client()
{
}

::Ice::Object* UVSS::upCast(::UVSS::Client* p) { return p; }


namespace
{
const ::std::string iceC_UVSS_Client_ids[2] =
{
    "::Ice::Object",
    "::UVSS::Client"
};

}

bool
UVSS::Client::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_UVSS_Client_ids, iceC_UVSS_Client_ids + 2, s);
}

::std::vector< ::std::string>
UVSS::Client::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_UVSS_Client_ids[0], &iceC_UVSS_Client_ids[2]);
}

const ::std::string&
UVSS::Client::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
UVSS::Client::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::UVSS::Client";
    return typeId;
#else
    return iceC_UVSS_Client_ids[1];
#endif
}

bool
UVSS::Client::_iceD_writeCheckInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_uVSSImageName;
    ::UVSS::ByteSeq iceP_uVSSImage;
    ::std::string iceP_plateImageName;
    ::UVSS::ByteSeq iceP_plateImage;
    ::std::string iceP_channel;
    ::std::string iceP_plateNumber;
    ::std::string iceP_direction;
    ::std::string iceP_time;
    ::std::string iceP_extension;
    istr->read(iceP_uVSSImageName);
    istr->read(iceP_uVSSImage);
    istr->read(iceP_plateImageName);
    istr->read(iceP_plateImage);
    istr->read(iceP_channel);
    istr->read(iceP_plateNumber);
    istr->read(iceP_direction);
    istr->read(iceP_time);
    istr->read(iceP_extension);
    inS.endReadParams();
    this->writeCheckInfo_async(new IceAsync::UVSS::AMD_Client_writeCheckInfo(inS), iceP_uVSSImageName, iceP_uVSSImage, iceP_plateImageName, iceP_plateImage, iceP_channel, iceP_plateNumber, iceP_direction, iceP_time, iceP_extension, current);
    return true;
}

namespace
{
const ::std::string iceC_UVSS_Client_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "writeCheckInfo"
};

}

bool
UVSS::Client::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_UVSS_Client_all, iceC_UVSS_Client_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_UVSS_Client_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_writeCheckInfo(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
UVSS::Client::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::UVSS::Client, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
UVSS::Client::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::UVSS::Client, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void 
UVSS::_icePatchObjectPtr(ClientPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::UVSS::ClientPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::UVSS::Client::ice_staticId(), v);
    }
}

UVSS::Server::~Server()
{
}

::Ice::Object* UVSS::upCast(::UVSS::Server* p) { return p; }


namespace
{
const ::std::string iceC_UVSS_Server_ids[2] =
{
    "::Ice::Object",
    "::UVSS::Server"
};

}

bool
UVSS::Server::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_UVSS_Server_ids, iceC_UVSS_Server_ids + 2, s);
}

::std::vector< ::std::string>
UVSS::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_UVSS_Server_ids[0], &iceC_UVSS_Server_ids[2]);
}

const ::std::string&
UVSS::Server::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
UVSS::Server::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::UVSS::Server";
    return typeId;
#else
    return iceC_UVSS_Server_ids[1];
#endif
}

bool
UVSS::Server::_iceD_checkVersion(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_ver;
    istr->read(iceP_ver);
    inS.endReadParams();
    bool ret = this->checkVersion(iceP_ver, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return false;
}

bool
UVSS::Server::_iceD_addClient(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Identity iceP_id;
    istr->read(iceP_id);
    inS.endReadParams();
    this->addClient(iceP_id, current);
    inS.writeEmptyParams();
    return false;
}

namespace
{
const ::std::string iceC_UVSS_Server_all[] =
{
    "addClient",
    "checkVersion",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
UVSS::Server::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_UVSS_Server_all, iceC_UVSS_Server_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_UVSS_Server_all)
    {
        case 0:
        {
            return _iceD_addClient(in, current);
        }
        case 1:
        {
            return _iceD_checkVersion(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
UVSS::Server::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::UVSS::Server, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
UVSS::Server::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::UVSS::Server, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void 
UVSS::_icePatchObjectPtr(ServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::UVSS::ServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::UVSS::Server::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
